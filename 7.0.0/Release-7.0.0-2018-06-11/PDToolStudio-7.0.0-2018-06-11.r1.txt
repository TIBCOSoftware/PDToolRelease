# (c) 2017 TIBCO Software Inc. All rights reserved.
# 
# Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
# The details can be found in the file LICENSE.
# 
# The following proprietary files are included as a convenience, and may not be used except pursuant
# to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
# csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
# csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
# and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
# are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
# 
# This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
# If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
# agreement with TIBCO.

==================================
PDToolStudio 6.2/7.0 Release notes:
==================================
Section 1: Minimum Recommend DV Versions
Section 2: Release notes (newest first)
Section 3: To Upgrade an existing install

==================================
Section 1:
Minimum Recommended CIS Versions:
==================================
CIS 7.0:  Hotfix  7.0.0.00.11 or higher
CIS 6.2:  Hotfix  6.2.0.00.22 or higher for basic http access [non-https]
CIS 6.2:  Hotfix  6.2.4.00.46 or higher for https access [PDTool over SSL]
CIS 6.2:  Hotfix  6.2.5.00.24 or higher for pkg_import -nosourceinfo to work properly [Archive Module]

==================================
Section 2:
Release Notes (newest first):
==================================

=========================
Release Date: 2018-06-11
=========================
1) DeploymentManager
	a) For all XML file, the actual registered trademark symbol was replaced with the text representation (R) as it caused problems with initSpring().

2) Common Code (mtinius)
	a) CommonUtils.maskCommand - Added specific tests for the VCS base type as there are code-specific checks per VCS type.
	b) ScriptExecutor.executeCommand - When there is an error and the stderr is empty/null then return stdout if it is not null.
		For GIT, the messages are returned on stdout for some return codes greater than 0.
	c) Moved VCSWSDAOImpl.resolveExecCommandLineError to CommonUtils.resolveExecCommandLineError 
		i) Added the ability for it to parse VCS_IGNORE_MESSAGES containing a wildcard "*".  Given the VCS_IGNORE_MESSAGES entry
			"fatal: pathspec * did not match any files", it will resolve any message containing the text before and after the * but not
			the variable text represented by the asterick.

3) VCS Module (mtinius) [Fixed GIT]
	a) VCSWSDAOImpl.execCommandLineVCS - When there is an error and the stderr is empty/null then return stdout if it is not null.
	b) VCSManagerImpl.vcsInitWorkspaceCommon - For GIT only:
		i) Create the workspace and VCS project root folder.
		ii) Set the working directory to the VCS project root folder.
		iii) Modified checkout command to use "." for the target folder instead of the VCS project root since the working directory is now VCS project root.
				arguments=" checkout " + vcsStruct.getVcsOptions() + " " + remoteBranch + " ."
		iv) Added an escape (% and $) of username and password after the URL encoder as a single % or $ is treated like a variable.  A double %% or $$ is escaped.
		v)  Added " config --system core.longpaths true" in order to handle long path names in windows.
	c) VCSManagerImpl.vcsInitializeBaseFolderCheckin
		i) Added a call to initialize the workspace as this would not have been done the first time when calling this method.
		ii) Added " config --system core.longpaths true" in order to handle long path names in windows. 
	d) Added messages to VCS_IGNORE_MESSAGES for /resources/config/deploy_GIT_[DEV1|UAT1|PROD1].properties files and /resources/modules/VCSModule.xml
		i)  "nothing to commit"
		ii) "fatal: pathspec * did not match any files"
	e) Modified AbstractLifecycleListener.handleErrors to only throw errors if the error is not present in VCS_IGNORE_MESSAGES
		by invoking CommonUtils.resolveExecCommandLineError.
	f) For GIT only, forced vcsCheckin to follow the vcsForcedCheckin code path due to circumstances where a similar concept of check in to SVN could not be ascertained.
		vcsCheckin: The check-in path performs the following steps:				vcsForcedCheckin: The vcs forced check-in performs the following steps:
			1) Export from CIS into temp dir										1) Check out from GIT
			2) Diffmerger to do a GIT add/delete									2) Validate paths
			3) Check out [this was wiping out the add/delete]						3) Export from CIS into temp dir
			4) Validate paths														4) Diffmerger to do a GIT add/delete
			5) Check in to GIT [commit and push]									5) Check in to GIT [commit and push]
		The main difference is that vcsForcedCheckin performs the check out from GIT first to synchronize the workspace and then performs
			the diff merger to add/delete resources with GIT followed by a check in to GIT.
		Given the use case for PDToolStudio, this was an acceptable resolution to this issue.  Given that the Data Virtualization Studio now supports GIT, PDToolStudio
			should rarely be used if at all.  If it is used for check in, then synchronizing the workspace first before check in is acceptable.


=========================
Release Date: 2017-12-22
=========================
1) Transitioned all modules and documentation to TIBCO(R) Software Github open source.
	a) Renamed packages from "com.cisco.dvbu" to "com.tibco"

=========================
Release Date: 2016-10-18
=========================
1) No changes for PDToolStudio.

=========================
Release Date: 2016-05-16
=========================
1) \bin Batch files: (mtinius)
	a) Windows: ExecutePDToolStudio.bat - Added a new feature to allow ExecutePDToolStudio.bat to return to the "PWD" previous working directory when PWD is set by an invoking batch file.
		If the batch file completes successfully, exits due to an error, or exits dues to invalid usage, it will execute "if defined PWD cd %PWD%
	b) Windows: \envBin\envStart.cmd - Added a new batch file that will create a new windows shell with PDTOOL_HOME, VCS_HOME, PDTOOL_BIN and PATH=%PDTOOL_BIN%;%VCS_HOME%;%PATH% set.
		The default color scheme:  background=blue, foreground=white.  The invoker has the ability to change the color scheme.
	c) Windows: encrypt.bat - Added a new batch file that can be executed from any directory to encrypt a PDTool file. 
		Requires executing "envStart.cmd" first.
	d) Windows: The encrypt file provides a pattern that customers can copy to build their own customized batch files which can be executed from any directory
		as long as envStart.cmd is executed first.	

=========================
Release Date: 2016-02-10
=========================
1) ExecutePDToolStudio.bat (mtinius)
	a) Fixed issue with drive letter when installed in a drive other than C:.  
		The issue was that the batch file did not allow the network drive to be correctly established on drives other than C:.
		The fix will now dynamically pick up the drive letter where PDTool is insalled such as D: or whatever it might be.

2) PDTool Installer (mtinius)
	a) Fixed issue where PDTool installer did not execute TFS eula

=========================
Release Date: 2015-09-22
=========================
1) PDToolStudio Installer for Windows (mtinius)
	a) Added an installer whereby the CIS Studio developer/user can simply edit a single batch file and supply answers to the installation variables
		and then execute the batch file to install PDToolStudio.  The installer directory contains documentation and the following two scripts
		to perform the installation.  The other advantage of the installer is that an Organization's PDTool Administrator can pre-configure
		these batch files to insure consistent installation across the organization. The PDTool Administrator can configure the batch file
		to have the developer or tester respond to all prompts or only the absolute necessary prompts such as the CIS and VCS password.  
		Installation will be easy and uniform.
			i) PDToolStudio-VCS.bat - Installation of PDToolStudio for CIS Studio Developers who require VCS access.
	b) The installer will copy bin/setMyPrePDToolStudioVars.bat and bin/setMyPostPDToolStudioVars.bat to the parent installation folder above the 
		PDToolStudio folder and set the variables according to the variables set in the installer batch file PDToolStudio-VCS.bat.  
		The following files were modified to conform to using variables that are set by the installer.  It is important when making modifications
		for your installation to conform to the variable naming conventions and patterns already established.  It will make installation and usage
		of PDToolStudio go smoother.
			i)   bin/setVars.bat
	c) New installation structure
		<drive>:<any_directory>
					/PDToolStudio7.0.0_[TFS|SVN|GIT|P4|CVS]
						setMyPrePDToolVars_host2.bat  <-----|  (primary location for variable values for host2)
						setMyPostPDToolVars_host2.bat <-----|  
						setMyPrePDToolVars_host1.bat  <--|  |  (primary location for variable values for host1)
						setMyPostPDToolVars_host1.bat <--|  |
						setMyPrePDToolVars.bat  <-----|  |  |  (primary location for variable values for default host)
						setMyPostPDToolVars.bat <-----|  |  |
						/PDToolStudio                 |  |  |
							/bin/setVars.bat ---------|  |  |  (invokes setMyPrePDToolStudioVars.bat and setMyPostPDToolStudioVars.bat)
							/bin_host1/setVars.bat ------|  |  (invokes setMyPrePDToolStudioVars_host1.bat and setMyPostPDToolStudioVars_host1.bat)
							/bin_host2/setVars.bat ---------|  (invokes setMyPrePDToolStudioVars_host2.bat and setMyPostPDToolStudioVars_host2.bat)
						/VCSClients
							/CVS_client
							/GIT_client
							/P4_client
							/SVN_client
							/TFS_TEE_client
							
2) VCSModule Module. (mtinius)
	a) Added a new TFS environment variable "TFS_USE_EXISTING_WORKSPACE=[true|false]" to indicate whether to use an existing TFS workspace.  
			This will not create a separate workspace for VCS integration. If this is true, CIS will only copy to/from the workspace 
			and not check into TFS. It will record add, edits and deletes in the workspace.  This allows for tools like Visual Studio to 
			perform the actual check-in to TFS.  This environment variable can be set in studio.properties.
	b) Fixed TFS issue where the parent "folder.cmf" files were not checked-in/committed when the any of the parent folders were new in CIS
		but never checked into TFS.  For example in TFS if /test1/test/test3 folder never existed and the CIS user decides to check-in
		/shared/test00/test1/test2/test3/proc1 [PROCEDURE], the proc1 procedure would get checked in but the parent folders would be left 
		in a pending state in TFS.  This left the door open for downstream deployment issues when the "folder.cmf" files were not committed.
		The fix will get the "tf status" and determine what other folders in the parent lineage need to be checked in and perform the check-in
		on each parent folder thus committing the "folder.cmf" files in the hierarchy.

=========================
Release Date: 2015-03-31
=========================
1) VCSModule (cgoodric)
	a) Added support for VCS integration with Github.  Supported: Check-in, Check-out.
	b) Not Supported: Forced Check-in is not supported at this time.

=========================
Release Date: 2014-12-15
=========================
1) Updated ExecutePDToolStudio.bat file.
	a) New Features
		1. Substitute Drive - Check if substitute drive exists and don't create it again if it does.
			Verify the substitute drive against the existing substitute path list.  Stop executing if the requested drive and path do not match
			what is currently defined by the "subst" list.
		4. Set propertyOrderPrecedence as a JVM variable so that the java code will pick it up if changed in the environment and not the property file.
		5. Added debug=[0|1].
		6. Added the ability to invoke a post-processing batch file such as setMyPostPDToolVars.bat in addition to the pre-processing batch file setMyPDToolVars.bat.
	b) Fixes
		1. writeOutput - fixed removal of double quotes at the beginning and end of a message but not the double quotes within the message.
		2. Get PARAM list - Gets any number of parameters even 9 or more and with double quotes.  Accurately displays them in call:USAGE.

2) setVars.bat
	a) Added ability to invoke pre- and post- processing batch files.  Standardized the approach to setting variables.
	   This allows for creating a standard packaging of PDTool for organizations to be able to simply unzip a package on a user's desktop.
	   setVars.bat becomes the generic base-line for setting variables while setMyPrePDToolStudioVars.bat and setMyPostPDToolStudioVar.bat
	   become the point of customization.   Even studio.properties can be a generic file that uses custom variables.
	   The idea is to minimize the point of customization to the 2 files below for each person.
	b) Modified ExecutePDToolStudio.bat to pass the location of setVars.bat into the common batch file "ExecutePDToolStudio_novars.bat"
	   so that the processing of variables could be done in a systematic way.
	     1. Process command line variables
		 2. Invoke setVars.bat by using the full path passed in.
		    2.a Optionally invoke setMyPrePDToolStudioVars.bat
			2.b Process setVars.bat
			2.c Optionally invoke setMyPostPDToolVars.bat
	b) Including a standardized sample for pre-processing of variables: setMyPrePDToolStudioVars.bat.
	c) Including a standardized sample for post-processing of variables: setMyPostPDToolStudioVars.bat.
	
3) studio.properties
	a) Option: VCS_WORKSPACE_INIT_LINK_OPTIONS
		Workspace Initialization.  Link workspace to VCS repository equates to svn import -m "linking workspace to the VCS repository" ... etc.
		For subversion only.  added -IGNORE_INIT_LINK - This option is used to ignore this step when users have READ-only access and will only 
		be doing check-out from subversion and not check-in.

=========================
Release Date: 2014-11-18
=========================
1) Updated the license in all files.

=========================
Release Date: 2014-08-25
=========================
1) No changes for PDToolStudio.

=========================
Release Date: 2014-07-10
=========================
1) No changes for PDToolStudio.

=========================
Release Date: 2014-06-30
=========================
1) No changes for PDToolStudio.

=========================
Release Date: 2014-06-13
=========================
1) VCS Module (mtinius)
	a) Fixed VCS_CHECKIN_OPTIONS(<commands>) for forced checkin.
	b) vcsInitializeBaseFolderCheckin - providing support for <TYPE=DATABASE> and [TYPE=DATABASE], <TYPE=CATALOG> and [TYPE=CATALOG], <TYPE=SCHEMA> and [TYPE=SCHEMA]
	   ExecutePDToolStudio.bat command line cannot accept <> angle brackets but it can accept [] square brackets.

2) Added the ability to support multi-host from the same PDToolStudio installation.
	Modified /bin/*.bat to abstract batch files that only set variables and invoke the real scripts in /bin_no_vars
	Added /bin_no_vars which contain the actual script execution code.
	Added /bin_host1 to abstract batch files example for the first host.
	Added /bin_host2 to abstract batch files example for the second host.
	
	Requires that C:\windows\system32\drivers\etc\hosts be configured with different hosts names if the actual host
		is the same host for both of the abstracted hosts.  If the hosts are already different then this is not required.
		For example, in order to support SVN and TFS configuration for the same host, create an alias in /etc/hosts:
			127.0.0.1	shared-dev-SVN
			127.0.0.1	shared-dev-TFS
	
	The host name is connected to the VCS Property file which points to the PDToolStudio62/bin folder of your choice.
	In Composite Studio, the menu Edit --> Options will display the VCS Property information and allow you to modify it.
	
	When logging into Studio, the VCS property file is automatically be created or used if exists in the folder
		C:\Users\%USERNAME%\.compositesw\<CIS_USER>.<CIS_DOMAIN>.<CIS_HOSTNAME>.properties
	For example if the user logs in as admin to the composite domain on host shared-dev-SVN the property file will be "admin.composite.shared-dev-SVN.properties".

	Given the example /etc/hosts above and the windows USERNAME=user1, 
		(1) when opening Studio as "user1" in the "ldap" domain for the host "shared-dev-SVN".  
		
			This will create or use C:\Users\user1\.compositesw\user1.ldap.shared-dev-SVN.properties configured like:
				#Wed Jun 04 09:12:27 EDT 2014
				vcsIncludeResourceSecurity=true
				enableVCS=true
				vcsWorkspacePath=C\:\\user1\.compositesw\\PDToolStudio62\\SVNsw\\cis_objects
				vcsScriptFolder=C\:\\user1\.compositesw\\PDToolStudio62\\bin_host1

		(2) when opening Studio as "user1" in the "ldap" domain for the host "shared-dev-TFS".  

			This will create or use C:\Users\user1\.compositesw\user1.ldap.shared-dev-TFS.properties configured like:
				#Wed Jun 04 09:12:54 EDT 2014
				vcsIncludeResourceSecurity=true
				enableVCS=true
				vcsWorkspacePath=C\:\\user1\.compositesw\\PDToolStudio62\\TFSsw\\Composite_62\\cis_objects
				vcsScriptFolder=C\:\\user1\.compositesw\\PDToolStudio62\\bin_host2
				
		In the above example, notice that the same installation path is used: C\:\\user1\.compositesw\\PDToolStudio62
		What is different is the /bin_host1 and /bin_host2 paths are used which contain the abstracted batch files. 
		The key to /bin_host1 and /bin_host2 is that the setVars.bat is setting environment variables that allow the user
		to point to a different VCS and different workspace.

3) studio.properties - Added variable "propertyOrderPrecedence" in order to give the user control over the precedence of order in which variables are retrieved.
	The property order of precedence defines which properties are retrieved in what order.
	   JVM - These are properties that are set on the JVM command line with a -DVAR=value
	   PROPERTY_FILE - These are the variables set in the configuration property file like deploy.properties or in the VCSModule.xml
	   SYSTEM - These are variables that are set in batch files in the operating system prior to invocation of PDTool.
	 If left blank, the default=JVM PROPERTY_FILE SYSTEM
	 However, it may be necessary to be able to override what is in the property file and pick up an environment variable first.
	 propertyOrderPrecedence=JVM SYSTEM PROPERTY_FILE

=========================
Release Date: 2014-05-28
=========================
1) No changes for PDToolStudio.

=========================
Release Date: 2014-05-19
=========================
1) VCS Module (mtinius):
	a) Added the ability to set/extract variables from TFS_SERVER_URL and the VCS_Module.xml variables.
	b) Added the ability in /bin/setVars.bat to invoke a separate setMyVars.bat file in the users home directory for presonal variable settings.
	c) Added checks for substitute drive in ExecutePDTool.bat and ExecutePDToolStudio.bat.
	d) Fixed issue where /log was created instead of /logs.

=========================
Release Date: 2014-04-12
=========================
1) VCS Module (mtinius):
	a) Added the ability to initialize the VCS with the Composite repository base folders and custom CIS folders.
	   Supported in this release: Subversion, TFS, Perforce
	   Not supported in this release: CVS
	   The use cases for this feature support multi-tenant environments or CIS repository installations where there
	   are 10s of 1000s of resources and not all resources will be placed under version control.  The base-level
	   folders are mandatory when establishing the VCS repository.  Without these folders being properly checked-in, 
	   the check-out process will not work properly.  The traditional way of approaching this was to check-in root (/)
	   to insure all base-level folders were checked in.  However, the downside to this is that then entire Composite
	   repository was also checked in.  This may not be desirable if there are 10s of 1000s of resources.  The other
	   requirement is that all intermediate folders leading up to the actual tenant folder must be checked in.  The only
	   way that this could have been done in the past was to check-in starting at that folder which in turn would check in
	   all folders within that path.  If there were other tenant folders within that path, they would also be checked in.
	   
	   The following capability has been added to PDToolStudio to provide the flexibility for initializing the VCS repository
	   with base-level folders and custom CIS folders.
            ExecutePDToolStudio.bat [-nopause] -vcsinitBaseFolders [-vcsinitBaseFolders custom-CIS-path-list] [-vcsuser vcs-username] [-vcspassword vcs-password]
               arg1:: [-nopause] is an optional parameter used to execute the batch file without pausing at the end of the script.
			   arg2:: -vcsinitBaseFolders is used to initialize the vcs repository with the Composite repository base folders and custom folders.
               arg3:: [-customCisPathList custom-CIS-path-list] optional parameter.   Custom, comma separated list of CIS paths to add to the VCS repository.
               arg4:: [-vcsuser vcs-username] optional parameter
               arg5:: [-vcspassword vcs-password] optional parameter

=========================
Release Date: 2014-03-26
=========================
1) No changes for PDToolStudio.

=========================
Release Date: 2014-03-12
=========================
1) Open Source Release (mtinius)
	a) Prepared PDTool for open source.  
	b) Changed package names from com.compositesw to com.cisco.dbvu

2) VCS Module (mtinius) - Added fix for filename/path too long issue.
	a) Resolved issue when running PDTool in windows and the path names are longer than 259 characters. Resolved for subversion and TFS.  Has not been resolved for Perforce or CVS.
	b) Caveat:  Since TFS is built on windows, TFS itself contains the 259 character limitation and therefore, it will still throw errors.  This is a known problem with TFS.
	
3) VCS Module (mtinius) - Added additional command line option variables for workspace initialization, checkin and checkout
	a) Options were added to deploy.properties, studio.properties and VCSModule.xml file.
	b) PDToolModule.xsd was modified to support additional properties
	c) List of property additions include:
		# Workspace Initialization.  Create new workspace: 				VCS_WORKSPACE_INIT_NEW_OPTIONS=
		# Workspace Initialization.  Link workspace to VCS repository: 	VCS_WORKSPACE_INIT_LINK_OPTIONS=
		# Workspace Initialization.  Get resources from VCS repository: VCS_WORKSPACE_INIT_GET_OPTIONS=
		# Resource Checkin. Checkin resources to VCS: 					VCS_CHECKIN_OPTIONS=
		# Resource Checkin Required. Checkin resources to VCS: 			VCS_CHECKIN_OPTIONS_REQUIRED=
		# Resource Checkout. Checkout resources to VCS: 				VCS_CHECKOUT_OPTIONS=
		# Resource Checkout Required. Checkout resources to VCS: 		VCS_CHECKOUT_OPTIONS_REQUIRED=
		
4) DEPRECATED: The property TFS_CHECKIN_OPTIONS has been deprecated.  Use VCS_CHECKIN_OPTIONS instead.

5) Added ability to inject "checkin" command line options into the Studio Comment text using this template:
		VCS_CHECKIN_OPTIONS(<commands>) your comments go here.
		Use VCS_CHECKIN_OPTIONS_REQUIRED in studio.properties file to require that those arguments are present.
		
=========================
Release Date: 2014-02-04
=========================
1) Batch Files (mtinius) - Updated batch files to include JAVA_OPT.  Added CERT_ARG but defaulted to blank as it may not be needed for PDTool Studio.

=========================
Release Date: 2013-12-10
=========================
no changes for PDToolStudio - refer to 2013-04-18 release.

=========================
Release Date: 2013-09-09
=========================
no changes for PDToolStudio - refer to 2013-04-18 release.

=========================
Release Date: 2013-05-09
=========================
no changes for PDToolStudio - refer to 2013-04-18 release.

=========================
Release Date: 2013-04-18
=========================
Author: mtinius
1) Added the ability to generate the Composite Studio "Enable VCS" property file using ExecutePDToolStudio.bat
   This writes out a properties file to C:\Users\<user>\.compositesw\<composite_user>.<domain>.<host>.properties which contains
   the Composite Studio Enable VCS settings.

=========================
Release Date: 2013-03-01
=========================
1) no changes for PDToolStudio - refer to 2013-01-14 release.

=========================
Release Date: 2013-02-15
=========================
1) no changes for PDToolStudio - refer to 2013-01-14 release.

=========================
Release Date: 2013-01-14
=========================
Author: mtinius
1) Modified deployment configuration files to account for different CIS versions so that when testing is done
   the versions are not mixed for ArchiveModule and VCSModule.

     /resources/config/
	studio.properties
		CIS_VERSION=6_2
		VCS_REPOSITORY_URL=http:////host.composite.com/svn/sandbox/PDTOOL/$CIS_VERSION
	
=========================
Release Date: 2012-10-29
=========================
Author: mtinius
1) Updated VCS code to take into account resource type when doing a check-in.
   Coincides with (SUP-13075) VCS checkin process attempts to check in the wrong resource when multiple.
   No PDTool configuration changes are required.

=========================
Release Date: 2012-10-09
=========================
no changes for PDToolStudio - refer to 2012-08-15 release.

=========================
Release Date: 2012-09-24
=========================
no changes for PDToolStudio - refer to 2012-08-15 release.

=========================
Release Date: 2012-08-15
=========================
1) Ported PDToolStudio to 6.2.  Made changes to:
   a) /bin/ExecutePDToolStudio.bat, checkout.bat, checkin.bat, forced_checkin.bat
   b) /lib/*.jar, added /lib/endorsed

=========================
Release Date: 2012-08-10
=========================
no changes for PDToolStudio - refer to 2012-07-19 release.
1) General change to CommonUtils.extracVariables
   a) Network share paths starting with \\ are converted to / causing invalid network/share paths.
      Requires the http URL to have 4 forward slashes: VCS_REPOSITORY_URL=http:////host.composite.com/svn/sandbox

=========================
Release Date: 2012-07-24
=========================
no changes for PDToolStudio - refer to 2012-07-19 release.

=========================
Release Date: 2012-07-19
=========================
1) studio.properties
    a) Added VCS_WORKSPACE_NAME environment variable
    b) Modified VCS_WORKSPACE_DIR
    c) Modified P4CLIENT and P4_ENV
    
2) Batch Executables (/bin)    
	a) Modified "all" windows batch files to address the "file too long" problem for all VCS implementations.
	b) Use a SUBST variable v: to assist in shortening the path

=========================
Release Date: 2012-06-08
=========================
1) VCSModule:
    a) Allow no username and password to be set in the deploy.properties, VCSModule.xml or the command line.
       This allows a user to use the cached credentials in the filesystem when executing a VCS command.
       An error will still be thrown by the VCS server if the user credentials have not been established.
       A user must first establish their credential outside of PD Tool prior to executing PD Tool commands for the first time.
    b) Allow properties to contain $$ within the text which is converted to $.  
       This is useful for URLS that contain a $ in the URL like http://localhost:port/$/repo/project      

=========================
Release Date: 2012-03-09
=========================
1) Fixed VCS issue with missing jar files.  Replaced mail.jar with geronimo-javamail_1.4_mail-1.8.2.jar and added saaj-ri.jar.
   These were required by the Archive code for import/export.
2) Added JAVA_OPT with min and max memory settings to ExecutePDTool.bat, ExecutePDTool.sh, and ExecutePDToolStudio.bat

=========================
Release Date: 2012-02-22
=========================
1) Fixed issue with p4 submit.  Command set as follows: p4 submit -d "<message> .//<cis-resource-path>"
2) Enhancement: added VCS_MESSAGE_PREPEND which allows the user to prepend a static message onto the message that gets passed in.
     Added VCS_MESSAGE_PREPEND deploy.property and studio.property
     command:  p4 submit -d "<VCS_MESSAGE_PREPEND> <message> .//<cis-resource-path>"
3) Fixed issue with 01/31 build not being able to login and perform ArchiveModule import or export.

To Upgrade an existing install:
Copy the following from the new distribution to your existing PD Tool installation
1.  /dist/CisDeployTool.jar
2.  /docs/*
3.  /lib/CisDeployToolModules.jar
4. Edit studio.properties (and any other studio properties that you have) and add the following text after VCS_IGNORE_MESSAGES
#
#-------------------
# VCS_MESSAGE_PREPEND - A static message that gets prepended onto all check-in or forced check-in messages
VCS_MESSAGE_PREPEND=
#-------------------

=========================
Release Date: 2012-01-31
=========================
1) New Build for PD Tool - no changes for PD Tool Studio

=========================
Release Date: 2012-01-26
=========================
1) Fixed a Perforce issue where the user does not have permissions to delete the link to the workspace on the server.
   Removed the -f flag from the command "p4 client -f -d ${VCS_WORKSPACE_NAME}" and provided a way to pass in
   options from the deploy.properties/studio.properties using P4DEL_LINK_OPTIONS=

=========================
Release Date: 2012-01-10
=========================
GA Release

=========================
Release Date: 2011-10-27
=========================
Modified Basic Authenticator to allow for user@domain for LDAP domains
Added 3rd party license files

=========================
Release Date: 2011-09-26
=========================
Updated documentation "Composite PS Promotion and Deployment Tool Studio VCS Integration.pdf"
Added initial TFS integration.
Updated /resources/plan files to reflect TFS properties and documentation

=========================
Release Date: 2011-09-06
=========================
Fixed bugs in scripts.
Updated documentation.
Fixed distribution.
Enhanced  studio configuration properties

================================
Section 3:
To Upgrade an existing install:
================================
1. Rename the original PDToolStudio or PDToolStudio[62|70] directory to PDToolStudio[62|70]-YYYY-MM-DD
     where YYYY-MM-DD represents the actual release of this version as found in PDToolStudio[62|70]-YYYY-MM-DD.r1.txt.
2. Install the new version by unzipping the PDToolStudio zip file

Upgrade Config Files
--------------------
3. Copy PDToolStudio[62|70]-YYYY-MM-DD/config/*.properties PDTool62/config
   a) Edit .properties files as needed or as directed by the release notes
   b) Copy any xml or log4j.properties if modified

Upgrade bin Files
--------------------
4. Copy any customized batch/shell script files from PDToolStudio[62|70]-YYYY-MM-DD/bin to PDToolStudio[62|70]/bin
   If there were any modifications to the ExecutePDToolStudio.bat or .sh, those would need to be 
	retro-fitted into the new ExecutePDToolStudio batch or shell script.
   In particular, copy the settings from PDToolStudio[62|70]-YYYY-MM-DD/bin/setVars.bat or .sh to the new
	PDToolStudio[62|70]/bin/setVars.bat
